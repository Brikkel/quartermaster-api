/*
 * Swagger K8S Quartermaster - OpenAPI 3.0
 *
 * This is the API design of the K8S quartermaster tool, the goal is to effectively obtain K8S resources, which can then be used for YAML configurations or other pruposes.  Some useful links: - [Swagger](https://swagger.io/) - [Kubernetes](https://kubernetes.io/docs/concepts/configuration/)
 *
 * API version: 0.0.1
 * Contact: rik.van.brakel@sue.nl
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	// "encoding/json"
	"net/http"
	"strings"

	"github.com/go-chi/chi/v5"
)

// ResourceAPIController binds http requests to an api service and writes the service results to the http response
type ResourceAPIController struct {
	service      ResourceAPIServicer
	errorHandler ErrorHandler
}

// ResourceAPIOption for how the controller is set up.
type ResourceAPIOption func(*ResourceAPIController)

// WithResourceAPIErrorHandler inject ErrorHandler into controller
func WithResourceAPIErrorHandler(h ErrorHandler) ResourceAPIOption {
	return func(c *ResourceAPIController) {
		c.errorHandler = h
	}
}

// NewResourceAPIController creates a default api controller
func NewResourceAPIController(s ResourceAPIServicer, opts ...ResourceAPIOption) Router {
	controller := &ResourceAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the ResourceAPIController
func (c *ResourceAPIController) Routes() Routes {
	return Routes{
		"GetParameters": Route{
			strings.ToUpper("Get"),
			"/v3/parameters/{versionPath}/{fullResourceName}",
			c.GetParameters,
		},
	}
}

// GetParameters - Gives parameters of a resource
func (c *ResourceAPIController) GetParameters(w http.ResponseWriter, r *http.Request) {
	fullResourceNameParam := chi.URLParam(r, "fullResourceName")
	if fullResourceNameParam == "" {
		c.errorHandler(w, r, &RequiredError{"fullResourceName"}, nil)
		return
	}
	versionPathParam := chi.URLParam(r, "versionPath")
	if versionPathParam == "" {
		c.errorHandler(w, r, &RequiredError{"versionPath"}, nil)
		return
	}
	result, err := c.service.GetParameters(r.Context(), fullResourceNameParam, versionPathParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
